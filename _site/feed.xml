

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Alex's Blog</title>
  <subtitle>A personal blog about various IT topics.</subtitle>
  <updated>2025-08-07T23:04:14+02:00</updated>
  <author>
    <name>Alexander Wenger</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Alexander Wenger </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>SSH Authentication Best Practices</title>
    <link href="http://localhost:4000/posts/SSH-Setup-Best-Practices/" rel="alternate" type="text/html" title="SSH Authentication Best Practices" />
    <published>2025-08-07T21:00:00+02:00</published>
  
    <updated>2025-08-07T21:00:00+02:00</updated>
  
    <id>http://localhost:4000/posts/SSH-Setup-Best-Practices/</id>
    <content type="text/html" src="http://localhost:4000/posts/SSH-Setup-Best-Practices/" />
    <author>
      <name>Alexander Wenger</name>
    </author>

  
    
    <category term="Network" />
    
  

  <summary>When it comes to securely connecting to your SSH server or using SSH to authenticate to Git, there are several important things to consider. This guide covers generating SSH keys, configuring them on remote servers, disabling password authentication, and using SSH with Git.  Generate SSH Key Pair  To generate a key pair, run the following command:  ssh-keygen -t ed25519 -f ~/.ssh/key_name -C "c...</summary>

  </entry>

  
  <entry>
    <title>Headless M.2 SSD Setup On Raspberry Pi 5</title>
    <link href="http://localhost:4000/posts/Headless-M.2-Setup-On-RPI5/" rel="alternate" type="text/html" title="Headless M.2 SSD Setup On Raspberry Pi 5" />
    <published>2024-07-13T21:00:00+02:00</published>
  
    <updated>2025-01-18T23:55:00+01:00</updated>
  
    <id>http://localhost:4000/posts/Headless-M.2-Setup-On-RPI5/</id>
    <content type="text/html" src="http://localhost:4000/posts/Headless-M.2-Setup-On-RPI5/" />
    <author>
      <name>Alexander Wenger</name>
    </author>

  
    
    <category term="IoT" />
    
  

  <summary>Learn how to set up your Raspberry Pi 5 to boot from a fast M.2 SSD, all without a graphical interface. Actually, not entirely without, because you will need a GUI to create a bootable SD card or USB stick on another device. But you don’t need to connect your Raspberry to a monitor. This step-by-step guide covers everything from hardware setup to software configuration for a headless setup on y...</summary>

  </entry>

  
  <entry>
    <title>Automating Terraform and Provider Updates</title>
    <link href="http://localhost:4000/posts/Automating-Terraform-Updates/" rel="alternate" type="text/html" title="Automating Terraform and Provider Updates" />
    <published>2024-06-15T21:00:00+02:00</published>
  
    <updated>2024-06-15T21:00:00+02:00</updated>
  
    <id>http://localhost:4000/posts/Automating-Terraform-Updates/</id>
    <content type="text/html" src="http://localhost:4000/posts/Automating-Terraform-Updates/" />
    <author>
      <name>Alexander Wenger</name>
    </author>

  
    
    <category term="Terraform" />
    
  

  <summary>As infrastructure as code (IaC) becomes increasingly popular, managing Terraform versions and provider dependencies efficiently is crucial. Discover in this blog post how Renovate simplifies managing Terraform versions and providers in your Git repository. Renovate allows some very specialized and complex setups, as you can configure a lot and it supports a lot of tools, but I want to show you ...</summary>

  </entry>

  
  <entry>
    <title>Create Terraform Validation Pipelines</title>
    <link href="http://localhost:4000/posts/Terraform-Validation-Pipeline/" rel="alternate" type="text/html" title="Create Terraform Validation Pipelines" />
    <published>2024-04-27T21:00:00+02:00</published>
  
    <updated>2025-01-18T23:48:30+01:00</updated>
  
    <id>http://localhost:4000/posts/Terraform-Validation-Pipeline/</id>
    <content type="text/html" src="http://localhost:4000/posts/Terraform-Validation-Pipeline/" />
    <author>
      <name>Alexander Wenger</name>
    </author>

  
    
    <category term="Terraform" />
    
  

  <summary>In this blog post, I want to show you how to create an Azure pipeline that can be used to automatically validate your Terraform code and make suggestions for security, quality and best practices so that you can improve your scrappy code. How? using static code analysis tools! There are a lot out there for Terraform and the major private cloud providers, but I have picked just a few that have ma...</summary>

  </entry>

  
  <entry>
    <title>Automate Terraform with Yaml</title>
    <link href="http://localhost:4000/posts/Terraform-Yaml-Guide/" rel="alternate" type="text/html" title="Automate Terraform with Yaml" />
    <published>2024-04-09T21:00:00+02:00</published>
  
    <updated>2025-01-18T23:48:30+01:00</updated>
  
    <id>http://localhost:4000/posts/Terraform-Yaml-Guide/</id>
    <content type="text/html" src="http://localhost:4000/posts/Terraform-Yaml-Guide/" />
    <author>
      <name>Alexander Wenger</name>
    </author>

  
    
    <category term="Terraform" />
    
  

  <summary>Following scenario: You have created an extremely well-designed Terraform that automates your boring and repetitive task, BUT you are the only one who knows how to take advantage of it.  Lets take this example Terraform where we want to automate the creation of an EntraID group for each department in your company:  data "azuread_client_config" "current" {}  resource "azuread_group" "Sales" {   ...</summary>

  </entry>

</feed>


