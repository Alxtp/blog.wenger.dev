[ { "title": "Secure Self-Hosting: A Guide to Automatically Pulling and Hosting Your Static Website from GitHub", "url": "/posts/Selfhost-Guide/", "categories": "Self-Hosting", "tags": "docker, caddy, github, nginx-proxy-manager, cloudflare, portainer", "date": "2024-04-01 15:15:00 +0200", "snippet": "In this guide I will show you an easy, lightweight and secure way to host your own website at home without showing your IP to the whole world.The solution consists of the following docker images: ...", "content": "In this guide I will show you an easy, lightweight and secure way to host your own website at home without showing your IP to the whole world.The solution consists of the following docker images: Docker Image Description portainer Management tool for docker caddy Webserver to host the static website nginx proxy manager Easy to use proxy with automatic SSL support watchtower Will automatically update all your container images cloudflare-ddns Used to automatically update the public dns pointer to your public IP Here is an overview of the architecture:Prerequisites Any device to run docker on Own a Domain or be ready to buy one A GitHub Repo with a ready to use static website (at least a index.html)Docker First install docker on your device by following the offical manual. Install Portainer to make your life simpler (you dont need to!) Access Portainer: https://your_ip:9443/Now that docker is prepared you can create all the required containers. I usualy use Stacks inside Portainer but you can do it in you own way. The doc refers only to Stacks.CaddyIn order to “host” my website files inside a GitHub repo and the webserver pulls changes from there I used the caddy-git module from Greenpau and created my own image: https://hub.docker.com/r/greedtp/caddy. The creation of the custom image is done here: https://github.com/GreedTP/caddyThe image can be used as follows:version: \"3.9\"services: caddy: image: greedtp/caddy:latest restart: unless-stopped volumes: - caddy_data:/data - caddy_config:/config environment: - REPO_NAME=wenger.dev - REPO_URL=https://github.com/GreedTP/wenger.dev.gitvolumes: caddy_data: caddy_config:networks: default: external: true name: dmz Note that we use a dedicated network “dmz”. With this it is not required to publish any ports on the containers (except for the proxy). Instead, we can proxy the traffic internaly.Nginx Proxy ManagerCreate the NPM image:version: '3.9'services: npm: image: 'jc21/nginx-proxy-manager:latest' restart: unless-stopped ports: - '80:80' # Public HTTP Port - '443:443' # Public HTTPS Port - '81:81' # Admin Web Port volumes: - ./data:/data - ./letsencrypt:/etc/letsencryptnetworks: default: external: true name: dmzNow you can access the Web interface and create the required proxy host: Login to NPM: https://your_ip:81/ Define username and password Under proxy hosts, create a new entry with your site url which points the name of your created caddy container to port 80: The SSL option will be covered laterNow your website should already be available under: http://your_ip When you commited changes to your website repo, you can pull the latest changes to caddy by just opening: http://your_ip/updateCloudflareTo make your website available to the public and hide your public IP, you can use Cloudflare as a reverse proxy. Sign up on Cloudflare Either register a new domain or add your existing domain to cloudflare Create a new DNS A record which points to your public IP. Make sure that Proxy status is “Proxied”!Port forward and SSL CertificateOn your router, forward ports 80 and 443 to your device IP. You can then request a new certificate for your domain from the SSL tab of your proxy host: If this doesnt work, use the DNS challange option to create a new SSL certificateCongrat! Your site is now public available. But maybe not for long as your public IP might change at some time. To solve this problem I used cloudflare-ddns.Cloudflare-DDNSThis container will automatically adjust the A record to point to your public IP if it changes.Create the config file by following the instructions here: https://github.com/timothymiller/cloudflare-ddnsWhen the config.json file is prepared you can create the docker image:version: '3.9'services: cloudflare-ddns: image: timothyjmiller/cloudflare-ddns:latest security_opt: - no-new-privileges:true network_mode: 'host' volumes: - /data/cloudflare-ddns/config.json:/config.json restart: unless-stopped Make sure the path for the volume matches the location of your config.json file.WatchtowerFinally create the Watchtower image which will update all the other images automatically in your docker:version: \"3.9\"services: watchtower: image: containrrr/watchtower restart: unless-stopped volumes: - /var/run/docker.sock:/var/run/docker.sockConclusionI have shown you a modern way to easily and securely (I would say) host your own website from home.However, this can only be the foundation of your self-hosted infrastructure. Now you can host as many services as you want; all you need to do is deploy a container, create a new entry in NPM, and create a new CNAME entry in Cloudflare." } ]
